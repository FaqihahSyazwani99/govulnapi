name: üîç BOLA Security Scan - Enterprise Grade

on:
  push:
    branches: [ main, develop ]
  pull_request:

jobs:
  bola-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üìÖ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üñç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üí° Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests tenacity jq

      - name: üî¢ Identify target files
        run: |
          SCAN_DIR="."
          echo "üìÅ Scanning directory: $SCAN_DIR"

          # Handle pull request vs push events correctly
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            BASE_REF="origin/${{ github.base_ref }}"
          else
            # Handle first commit scenario where HEAD^ doesn't exist
            if git rev-parse HEAD^ >/dev/null 2>&1; then
              BASE_REF="HEAD^"
            else
              BASE_REF="$(git rev-list --max-parents=0 HEAD)"  # Get initial commit
            fi
          fi

          echo "üîç Comparing changes from $BASE_REF to HEAD"

          # Get changed files
          CHANGED_FILES_RAW=$(git diff --name-only --diff-filter=AM "$BASE_REF" HEAD -- "$SCAN_DIR" || echo "")
          CHANGED_FILES=$(echo "$CHANGED_FILES_RAW" | grep -E '\.(go|js|py|ts|java)$' || echo "")
          echo "üßæ CHANGED_FILES:"
          echo "$CHANGED_FILES"

          # Get all matching files
          ALL_FILES=$(find "$SCAN_DIR" -type f \( -name "*.go" -o -name "*.js" -o -name "*.py" -o -name "*.ts" -o -name "*.java" \) -print0 | xargs -0 echo || echo "")
          echo "üì¶ ALL_FILES:"
          echo "$ALL_FILES"

          # Choose which files to scan
          if [ -z "$CHANGED_FILES" ]; then
            FILES="$ALL_FILES"
            echo "‚ÑπÔ∏è No changed files, scanning ALL files."
          else
            FILES="$CHANGED_FILES"
            echo "‚ÑπÔ∏è Scanning only CHANGED files."
          fi

          # Convert to JSON array
          if [ -z "$FILES" ]; then
            TARGET_FILES="[]"
          else
            TARGET_FILES=$(echo "$FILES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi

          echo "üéØ TARGET_FILES: $TARGET_FILES"
          echo "üìä Number of files to scan: $(echo "$TARGET_FILES" | jq 'length')"
          echo "TARGET_FILES=$TARGET_FILES" >> $GITHUB_ENV

      - name: üö° Run Enhanced BOLA Scanner
        env:
          TARGET_FILES: ${{ env.TARGET_FILES }}
          LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
          OLLAMA_API_KEY: ${{ secrets.OLLAMA_API_KEY }}
          OLLAMA_ENDPOINT: ${{ secrets.OLLAMA_ENDPOINT }}
        run: |
          python .github/workflows/bola_scanner.py

      - name: üìÖ Upload Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bola-scan-results
          path: |
            bola-results.json
            bola-results.sarif

      - name: üìä Upload SARIF Report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bola-results.sarif

      - name: ‚ùå Fail on vulnerabilities
        if: failure()
        run: |
          echo "::error::BOLA vulnerabilities detected! Review scan artifacts"
          exit 1
