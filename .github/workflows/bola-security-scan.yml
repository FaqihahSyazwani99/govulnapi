name: üîç BOLA Security Scan - Enterprise Grade

on:
  push:
    branches: [ main, develop ]
  pull_request:

jobs:
  bola-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      SCAN_DIR: 'src'
      OLLAMA_ENDPOINT: ${{ secrets.OLLAMA_ENDPOINT || 'http://localhost:8080' }}
      LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
      OLLAMA_API_KEY: ${{ secrets.OLLAMA_API_KEY }}

    steps:
      - name: üìÖ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üñç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üí° Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests tenacity

      - name: üî¢ Identify target files
        id: target-files
        run: |
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            BASE_REF="origin/${{ github.base_ref }}"
          else
            BASE_REF="HEAD^"
          fi

          CHANGED_FILES=$(git diff --name-only --diff-filter=AM $BASE_REF HEAD -- $SCAN_DIR | grep -E '\\.(go|js|py|ts|java)$')
          ALL_FILES=$(find $SCAN_DIR -type f \( -name "*.go" -o -name "*.js" -o -name "*.py" -o -name "*.ts" -o -name "*.java" \))

          if [ -z "$CHANGED_FILES" ]; then
            FILES="$ALL_FILES"
            echo "‚ÑπÔ∏è Scanning all files in $SCAN_DIR"
          else
            FILES="$CHANGED_FILES"
            echo "‚ÑπÔ∏è Scanning changed files only"
          fi

          echo "TARGET_FILES=$(echo $FILES | jq -R -s -c 'split(" ") | map(select(. != ""))')" >> $GITHUB_OUTPUT

      - name: üõ°Ô∏è Run Enhanced BOLA Scanner
        env:
          TARGET_FILES: ${{ steps.target-files.outputs.TARGET_FILES }}
        run: |
          cat << 'EOF' > bola_scanner.py
          import os, json, requests
          from pathlib import Path
          from tenacity import retry, stop_after_attempt, wait_exponential

          LANGCHAIN_ENDPOINT = os.getenv("LANGCHAIN_API_ENDPOINT", "https://api.langchain.io")
          OLLAMA_ENDPOINT = os.getenv("OLLAMA_API_ENDPOINT", "http://localhost:8080")

          @retry(stop=stop_after_attempt(3), wait=wait_exponential())
          def langchain_scan(code):
              try:
                  response = requests.post(
                      f"{LANGCHAIN_ENDPOINT}/api/v1/analyze",
                      headers={
                          "Authorization": f"Bearer {os.environ['LANGCHAIN_API_KEY']}",
                          "Content-Type": "application/json"
                      },
                      json={"code": code, "scan_type": "BOLA"},
                      timeout=30
                  )
                  return response.json()
              except Exception as e:
                  return {"error": str(e)}

          @retry(stop=stop_after_attempt(3), wait=wait_exponential())
          def ollama_scan(code):
              try:
                  prompt = f"Check this code for OWASP API1:2023 BOLA issues:\n\n{code[:5000]}"
                  headers = {"Content-Type": "application/json"}
                  if os.getenv("OLLAMA_API_KEY"):
                      headers["Authorization"] = f"Bearer {os.environ['OLLAMA_API_KEY']}"

                  response = requests.post(
                      f"{OLLAMA_ENDPOINT}/api/generate",
                      headers=headers,
                      json={"model": "llama3", "prompt": prompt, "stream": False},
                      timeout=45
                  )
                  return response.json()
              except Exception as e:
                  return {"error": str(e)}

          def main():
              files = json.loads(os.environ.get("TARGET_FILES", "[]"))
              results = []
              vulnerabilities = []

              for file in files:
                  if not os.path.exists(file):
                      continue
                  with open(file, 'r') as f:
                      code = f.read()
                  lc_result = langchain_scan(code)
                  ol_result = ollama_scan(code)
                  result = {"file": file, "langchain": lc_result, "ollama": ol_result}
                  results.append(result)

                  for response in [lc_result, ol_result]:
                      vulns = response.get("vulnerabilities") or response.get("bola_vulnerabilities")
                      if vulns:
                          for vuln in vulns:
                              vuln["file"] = file
                              vulnerabilities.append(vuln)

              with open("bola-results.json", "w") as f:
                  json.dump(results, f, indent=2)

              sarif = {
                  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
                  "version": "2.1.0",
                  "runs": [{
                      "tool": {
                          "driver": {
                              "name": "BOLA Scanner",
                              "rules": [{
                                  "id": "BOLA",
                                  "name": "Broken Object Level Authorization",
                                  "shortDescription": {"text": "API1:2023 BOLA"},
                                  "fullDescription": {"text": "Improper object-level access control in APIs."},
                                  "helpUri": "https://owasp.org/API-Security/editions/2023/en/0xa1-broken-object-level-authorization/"
                              }]
                          }
                      },
                      "results": [
                          {
                              "ruleId": "BOLA",
                              "level": vuln.get("severity", "warning"),
                              "message": {"text": vuln.get("description", "BOLA issue detected.")},
                              "locations": [{
                                  "physicalLocation": {
                                      "artifactLocation": {"uri": vuln.get("file")},
                                      "region": {"startLine": vuln.get("line", 1)}
                                  }
                              }]
                          }
                          for vuln in vulnerabilities
                      ]
                  }]
              }

              with open("bola-results.sarif", "w") as f:
                  json.dump(sarif, f, indent=2)

              if vulnerabilities:
                  print(f"‚ùå Found {len(vulnerabilities)} vulnerabilities")
                  exit(1)
              else:
                  print("‚úÖ No BOLA issues found")

          if __name__ == "__main__":
              main()
          EOF

          python bola_scanner.py

      - name: üì• Upload Scan Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bola-scan-results
          path: |
            bola-results.json
            bola-results.sarif

      - name: üìä Upload SARIF Report
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bola-results.sarif

      - name: ‚ùå Fail on vulnerabilities
        if: failure() && steps.bola-scan.outcome == 'failure'
        run: |
          echo "::error::BOLA vulnerabilities detected! Review scan artifacts"
          exit 1
